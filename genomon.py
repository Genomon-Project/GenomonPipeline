#!/usr/bin/python
"""

Genome Analysis Pipeline


"""

import sys
import os
import shutil
from datetime import datetime
import argparse
from glob import glob
from ruffus import *
import yaml

################################################################################
#
# Globals
#
log = None
global Geno
class Geno(object):
    now     = None
    options = None
    conf    = None
    job     = None
    data    = None
    results = None
    RT      = None


################################################################################
#
# Private modules
#
import genomon_rc as res
from genomon_cfg import genomon_config as ge_cfg
from genomon_job import genomon_job as ge_job
from runtask import RunTask

################################################################################
#
# Subroutines
#
def construct_arguments( ):
    """
    Call argparse and create argument object
    
    """

    parser = cmdline.get_argparse( description='Genome Analysis Pipeline' )

    ge_arg = parser.add_argument_group( 'genomon', 'Genomon options' );

    ge_arg.add_argument( '-s', "--config_file",  help = "Genomon pipeline configuration file",    type = str )
    ge_arg.add_argument( '-f', "--job_file",     help = "Genomon pipeline job file",              type = str )
    ge_arg.add_argument( '-m', "--mpi",          help = "Enable MPI",   action ='store_true',     default = False )

    return parser

########################################
def printheader( myself, options ):
    """
    Print infomration about this run

    """
    Geno.now = datetime.now()

    log.info( "Generated by {my}".format(my = myself ) )
    log.info( "Input config file = {input}".format( input = options.config_file  ) )
    log.info( "Input job file    = {input}".format( input = options.job_file  ) )


########################################
def make_dir( dir_tmp, cwd ):
    """
    Reserved names to replace strings defined in job configuration file
        project_directory   -> defined as project in job configuration file
        data_date           -> defined sample_date in job configuration file
        sample_name         -> defined sample_name in job configuration file
        run_date            -> date of the pipeline to run
    """
    #
    # Replace reserved strings
    #
    if dir_tmp == 'project_directory':
        dir_replace = Geno.job.get( 'project' )
    elif dir_tmp == 'data_date':
        dir_replace = str( Geno.job.get( 'sample_date' ) )
    elif dir_tmp == 'sample_name':
        dir_replace = Geno.job.get( 'sample_name' )
    elif dir_tmp == 'data_date_sample_name':
        dir_replace = str( Geno.job.get( 'sample_date' ) ) + '_' + Geno.job.get( 'sample_name' )
    elif dir_tmp == 'run_date':
        dir_replace = res.date_format.format( 
                    year = Geno.now.year, 
                    month = Geno.now.month, 
                    day = Geno.now.day ) 
    else:
        dir_replace = dir_tmp

    #
    # Make directories
    #
    cwd_tmp = cwd + '/' + dir_replace
    if not os.path.exists( cwd_tmp ):
        os.makedirs ( cwd_tmp )
    return cwd_tmp

def make_dirs( dir_tree, cwd ):
    """
    make directory by dir_tree
    """
    if isinstance( dir_tree, dict ):
        for dir_tmp in dir_tree.keys():
            if isinstance( dir_tmp, str ):
                cwd_tmp = make_dir( dir_tmp, cwd )
            make_dirs( dir_tree[ dir_tmp ], cwd_tmp  )
    elif isinstance( dir_tree, list ):
        n = 0
        for dir_tmp in dir_tree:
            if isinstance( dir_tmp, str ):
                make_dir( dir_tmp, cwd )
            else:
                make_dirs( dir_tree[ n ], cwd )
            n = n + 1

def make_directories( ):
    """
    Make Directory Tree Structure
       Read directory structure from resource file
       Make sure that input data exists.
       Create results directory if necesesary

    """

    #
    # Make sure the input data is availalbe.
    #
    root_dir = Geno.job.get( 'project_root' )

    try:
        if not os.path.exists( root_dir ):
            raise RuntimeError( "Dir: {dir} not found.".format( dir = root_dir ) )


        #
        # make directories
        #
        dir_tree = yaml.load( res.dir_tree_resource )
        make_dirs( dir_tree, root_dir )

        project_dir = root_dir + '/' + Geno.job.get( 'project' )

        #
        # data location
        #
        Geno.data = res.data_dir.format( 
                    proj = project_dir,
                    date = Geno.job.get( 'sample_date' ),
                    name = Geno.job.get( 'sample_name' ) )


        #
        # results location
        #
        Geno.results = res.results_dir.format(
                    proj = project_dir,
                    year = Geno.now.year,
                    month = Geno.now.month,
                    day = Geno.now.day,
                    date = Geno.job.get( 'sample_date' ),
                    name = Geno.job.get( 'sample_name' ) )

    except IOError as (errno, strerror):
        log.error( "make_directories failed." )
        log.error( "IOError {0}]{1}".format( errno, strerror ) )
    except:
        log.error( "make_directories failed." )
        log.error( "Unexpected error: {1}".format( sys.exc_info()[0] ) )

########################################
def copy_config_files():
    """
    Copy genomon system configuration file and job configuration file
    to results directory

    """
    global Geno

    src = Geno.options.config_file
    basename = os.path.basename( src )
    dest = "{dir}/config/{basename}".format( dir = Geno.results, basename = basename )
    shutil.copyfile( src, dest )

    src = Geno.options.job_file
    basename = os.path.basename( src )
    dest = "{dir}/config/{basename}".format( dir = Geno.results, basename = basename )
    shutil.copyfile( src, dest )

###############################################################################
#
# main
#
def main():
    global starting_files
    global log
    global Geno

    try:
        #
        # Argument parse
        #
        argvs = sys.argv
        arg_parser = construct_arguments()

        if len(argvs) < 3:
            arg_parser.print_help()
            raise "Argument"

        Geno.options = arg_parser.parse_args()

        #
        # Logging setup
        #
        #  logger which can be passed to multiprocessing ruffus tasks
        log, log_mutex = cmdline.setup_logging( __name__,
                                                Geno.options.log_file,
                                                Geno.options.verbose )

        #
        # Print header in log
        #
        printheader( argvs[ 0 ], Geno.options )

        #
        # Parse system and job config file
        #
        Geno.conf = ge_cfg( config_file = Geno.options.config_file, log = log )
        Geno.job = ge_job( Geno.options.job_file, log = log )

        #
        # Prepare directory tree for pipeline to run.
        # Copy the input configuration files to results directory
        #
        make_directories()
        copy_config_files()

        #######################################################################
        #
        # Run the defined pipeline
        #

        #
        # Initalize RunTask object
        #
        Geno.RT = RunTask( enable_mpi = Geno.options.mpi, log = log, ncpus = Geno.options.jobs )

        #
        # Get the list of starting files
        #
        log.info( '# main: process={num}'.format( num = Geno.options.jobs ) )

        #
        # Figure out what to run from job configuration file
        #
        job_tasks = Geno.job.get( 'tasks' )

        if True:
            if job_tasks[ 'WGS' ]:
                import wgs_pipeline as pipeline

            elif job_tasks[ 'WES' ]:
                import wes_pipeline as pipeline

            elif job_tasks[ 'Capture' ]:
                import capture_pipeline as pipeline

            pipeline_run(   target_tasks = [ pipeline.last_function ],
                            multiprocess = Geno.options.jobs,
                            logger = log,
                            verbose = Geno.options.verbose )
                            

        #
        #######################################################################

    except IOError as (errno, strerror):
        log.error( "main: I/O error({0}): {1}".format(errno, strerror) )

    except ValueError:
        log.error( "main: ValueError" )

    except:
        exc_info = sys.exc_info()
        if log:
            log.error( "main: Unexpected error:" )

    return 0


################################################################################
if __name__ == "__main__":
    main()
