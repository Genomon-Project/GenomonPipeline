#!/usr/bin/python
"""

Job file checker


"""

import sys
import os
from datetime import datetime
import argparse
import logging
import yaml
import ConfigParser
import pprint
from glob import glob

from resource.genomon_rc import end_dir_list as end_dir_list
import helpers.job_check as job_check

#
# class
#
class InputFileError( Exception ):
    def __init__( self, value ):
        self.value = value
    def __str__( self ):
        return repr( self.value )

#
# Subroutines
#

def PrintHeader( pp, myself):
    """
        Print header

    """
    now = datetime.now()

    print( '#' * 84 )
    print( '# Job YAML file checker' )
    print( '# Generated by %(my)s' % { 'my': myself } )
    print( '# %(y)d.%(m)d.%(d)d.%(h)d:%(m)d' % { 'y': now.year, 'm': now.month, 'd': now.day, 'h': now.hour, 'm': now.minute } )
    print( '#' * 84 )


#
# Main
#
def main():  

    try:
        FORMAT = '%(asctime)-15s %(message)s'
        logging.basicConfig( level = logging.INFO, format=FORMAT )

        #
        # Argument parse
        #
        argvs = sys.argv
        myself = argvs[ 0 ]
        argc = len(argvs)

        parser = argparse.ArgumentParser( description = "Template" )
        parser.add_argument( '-j', '--job_file',        help = "Job config file",    type = str )
        parser.add_argument( '-p', '--param_file',      help = "Analysis parameter file", type = str )
        parser.add_argument( '-s', '--system_config',   help = "System config file", type = str )
        parser.add_argument( '-k', '--keyword_file',    help = "Keyword file",       type = str )

        if argc < 2:
            print parser.print_help();
            sys.exit( 1 )
        
        arg = parser.parse_args()

        #
        # Print header
        #
        pp = pprint.PrettyPrinter( indent = 4 )
        PrintHeader( pp, myself )

        if arg.keyword_file:
            keyword_f = open( arg.keyword_file )
            keyword_yaml = yaml.load( keyword_f )
        else:
            print parser.print_help();
            sys.exit( 1 )

        if arg.job_file:
            job_f = open( arg.job_file )
            job_yaml = yaml.load( job_f )
            if not job_check.Job_file_check( job_yaml, keyword_yaml ):
                raise InputFileError( 'The job YAML file contains invalid settings.' )

        if arg.param_file:
            param_f = open( arg.param_file )
            param_yaml = yaml.load( param_f )
            if not job_check.Param_file_check( job_yaml, param_yaml, keyword_yaml ):
                raise InputFileError( 'The parameter YAML file contains invalid settings.' )

        if arg.system_config:
            system_config = ConfigParser.SafeConfigParser() 
            system_config.read( arg.system_config )

            if not job_check.System_config_file_check( system_config, keyword_yaml ):
                raise InputFileError( 'The system config file contains invalid settings.' )

        logging.info( "Files look OK!" )

    except InputFileError as error:
        logging.error( "Input file error: {error}.".format( error = error ) )

    except IOError as (errno, stderror ):
        logging.error( "genomon_job.open_job: IOError: error number: {num}, std_error: {stderr}".format(
                    num = errno, stderr = stderror ) )
    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        logging.error( "genomon_job.open_job: unexpected error:", sys.exc_info()[0] )
        logging.error("{0}: {1}:{2}".format( exc_type, fname, exc_tb.tb_lineno) )

if __name__ == "__main__":
    main()
