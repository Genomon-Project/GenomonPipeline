#!/usr/bin/env python
"""

Genome Analysis Pipeline


"""

import sys
import os
import shutil
from datetime import datetime
import argparse
from ruffus import *
import yaml

################################################################################
#
# Globals
#
global log
log = None
global Geno
class Geno(object):
    now     = None
    options = None
    conf    = None
    job     = None
    RT      = None
    status = None
    cwd     = None
    dir_mode = 0755
    dir     = {}
    job_tasks = None
    sample_input    = None
    sample_compare  = None
    input_file_list = []


################################################################################
#
# Private modules
#
from resource import genomon_rc as res
from helpers.genomon_cfg import genomon_config as ge_cfg
from helpers.genomon_job import genomon_job as ge_job
from helpers.runtask import RunTask
from helpers.utils import *
from helpers.status import genomon_status as ge_status
from helpers.infilelist import input_file_list as smpl_list

################################################################################
#
# Subroutines
#
def construct_arguments( ):
    """
    Call argparse and create argument object
    
    """

    parser = argparse.ArgumentParser( 'genomon', "Genomon [DNA|RNA] [output directory] [sample list file]\n\nGenomon Pipeline Framework" );

    #
    # Positional argument
    #
    parser.add_argument( 'analysis_type',       help = "Analysis type [DNA|RNA]", type = str )
    parser.add_argument( 'output_directory',    help = "Output directory", type = str )
    parser.add_argument( 'sample_file',         help = "Sample list file [csv/tsv/xlsx]", type = str )


    #
    # Optional argument
    #
    parser.add_argument( '-s', "--config_file",  help = "Genomon pipeline configuration file",      type = str )
    parser.add_argument( '-f', "--job_file",     help = "Genomon pipeline job configuration file",  type = str )
    parser.add_argument( '-p', "--param_file",   help = "Genomon pipeline analysis parameter file", type = str )


    parser.add_argument( '-v', "--verbose",  help = "Print more verbose messages for each additional verbose level.",
                                                                                                    type = int, default = 0 )
    parser.add_argument( '-L', "--log_file",     help = "Name and path of log file",                type = str )
    parser.add_argument( '-j', "--jobs",         help = "Allow N jobs (commands) to run simultaneously.",
                                                                                                    type = int, default = None )

    parser.add_argument( '-o', "--multiprocess", help = "Number of multiprocesses to run", type = int, default = None )
    parser.add_argument( '-r', "--multithread", help = "Number of multithread to run", type = int, default = None )
    parser.add_argument( '-u', "--use_threads", help = "Use multiple threads rather than processes. Needs --jobs N with N > 1", action = 'store_true', default = False )


    parser.add_argument( "--touch_files_only", help = "Don't actually run the pipeline; just 'touch' the output for each tasks to make them appear up to date.",
                                                                                                    type = str )
    parser.add_argument( "--recreate_database", help = "Don't actually run the pipeline; just recreate the checksum database.",
                                                                                                    type = str )
    parser.add_argument( "--checksum_file_name", dest = "history_file", metavar="FILE", type=str,
                                            help="Path of the checksum file.")
    parser.add_argument( '-d', "--drmaa",        help = "Use DRMAA job submission",     action ='store_true',
                                                                                        default = False )
    parser.add_argument( '-l', "--abpath",       help = "Use absolute path in scripts", action ='store_true',
                                                                                        default = False )

    return parser

########################################
def printheader( myself, options ):
    """
    Print infomration about this run

    """
    Geno.now = datetime.now()

    log.info( "\nGenerated by {my}".format(my = myself ) )
    log.info( "Analysis          = {0}".format( options.analysis_type  ) )
    log.info( "Output directory  = {0}".format( options.output_directory  ) )
    log.info( "Sample list file  = {0}".format( options.sample_file  ) )

    if options.config_file:
        log.info( "Input config file    = {0}".format( options.config_file  ) )
    if options.job_file:
        log.info( "Input job file       = {0}".format( options.job_file  ) )
    if options.param_file:
        log.info( "Input parameter file = {0}".format( options.param_file  ) )


########################################
def make_directories():
    """
    Make Directory Tree Structure
       Read directory structure from resource file
       Make sure that input data exists.
       Create results directory if necesesary

    """

    #
    # Make sure the input data is availalbe.
    #
    

    error_message = ''
    try:
        project_root = os.path.expanduser( Geno.job.get_job( 'project_root' ))
        Geno.dir[ 'project_root' ] = project_root
        if not os.path.exists( project_root ):
            os.makedirs( project_root )

        #
        # get directory tree, directory permission
        #
        dir_tree  = Geno.job.get_job( 'project_dir_tree' )
        dir_permit  = Geno.job.get_job( 'directory_permission' )
        if dir_permit and dir_permit == 'group':
            Geno.dir_mode = 0775
        elif dir_permit and dir_permit == 'all':
            Geno.dir_mode = 0777

        #
        # get directory locations
        #
        Geno.dir[ 'cwd' ] = os.getcwd()
        cwd = project_root
        if not Geno.options.abpath:
            os.chdir( cwd )
            cwd = '.'

        sample_name = Geno.job.get_job( 'sample_name' )

        if hasattr( Geno, 'sample_list'):
            sample_list = []
            for sample in Geno.sample_list.keys():
                sample_list.append( sample )
        else:
            sample_list = None

        make_input_target( dir_tree, cwd, Geno, sample_name = sample_name, sample_list = sample_list )

        #
        # data diretory
        # make symbolic link from the original input_file_dir
        #   if input_file_dir is not the same as data dir
        #
        data_dir = get_dir( dir_tree, cwd, 'data', Geno )
        make_dir( data_dir, Geno )
    
        data_tree = dir_tree[ 'project_directory' ][ 'data' ]
        Geno.dir[ 'data' ] = get_dir( data_tree, data_dir, 'sample_group', Geno) 
        if ( not os.path.exists( Geno.dir[ 'data' ] ) and
             Geno.job.get_job( 'input_file_dir' ) and
             Geno.job.get_job( 'input_file_dir' ) != Geno.dir[ 'data' ] ):
                make_dir( os.path.split( Geno.dir[ 'data' ] )[0], Geno )
                os.symlink( Geno.job.get_job( 'input_file_dir' ), Geno.dir[ 'data' ] )

    except IOError, (errno, strerror):
        log.error( "make_directories failed." )
        log.error( "IOError {0}]{1}".format( errno, strerror ) )
        raise


    except Exception, e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        log.error( "make_directories failed." )
        log.error( "Unexpected error: {1}".format( error_message ) )
        log.error("{0}: {1}:{2}".format( exc_type, fname, exc_tb.tb_lineno) )
        raise

########################################
def make_input_file_link( sample_list = None ):
    if sample_list:
        for sample in sample_list.keys():
            sample_dir = Geno.dir[ 'data' ] + '/' + sample
            if not os.path.exists( sample_dir ):
                os.makedirs ( sample_dir )

            id = 1
            for sample_file1, sample_file2 in zip( sample_list[ sample ][ 0 ].split( ',' ),
                                                   sample_list[ sample ][ 1 ].split( ',' ) ):
#                dest_file_name1 = sample_dir + '/' + os.path.basename( sample_file1 )
                dest_file_name1 = sample_dir + '/' +  str( id ) + '_1.fastq'
                if not os.path.exists( dest_file_name1 ):
                    os.symlink( sample_file1, dest_file_name1 )

                dest_file_name2 = sample_dir + '/' + str( id ) + '_2.fastq'
                if not os.path.exists( dest_file_name2 ):
                    os.symlink( sample_file2, dest_file_name2 )

                Geno.input_file_list.append( ( dest_file_name1, dest_file_name2 ) )
                id += 1

    elif Geno.jog.get_job( 'input_file_dir' ):
        os.symlink( Geno.job.get_job( 'input_file_dir' ), Geno.dir[ 'data' ] )

########################################
def copy_config_files():
    """
    Copy genomon system configuration file and job configuration file
    to results directory

    """
    global Geno

    config_dir = Geno.dir[ 'config' ]

    #
    # Backup system configuration file
    #
    header = 'genomon'
    timestamp = res.timestamp_format.format(
                                        year=Geno.now.year,
                                        month=Geno.now.month,
                                        day=Geno.now.day,
                                        hour=Geno.now.hour,
                                        min=Geno.now.minute,
                                        msecond=Geno.now.microsecond )
    extension_list = []
    if Geno.options.config_file:
        extension_list += [ ( Geno.options.config_file, '.cfg' ) ]
    if Geno.options.job_file:
        extension_list += [( Geno.options.job_file, '_job.yaml' ) ]
    if Geno.options.param_file:
        extension_list += [ (Geno.options.param_file, '_param.yaml' ) ]

    for src, ext in extension_list:
        dest = "{dir}/{basename}_{timestamp}{ext}".format(
                                dir = config_dir,
                                basename = header,
                                timestamp = timestamp,
                                ext = ext )
        if not os.path.isabs( src ):
            src = Geno.dir[ 'cwd' ] + '/' + src
        shutil.copyfile( src, dest )

    #
    # Initialize status object
    #
    Geno.status = ge_status( config_dir, header, timestamp)

########################################
def copy_script_files():
    """
    Copy genomon script files to script directory

    """
    global Geno

    for script_file in res.script_files:
        src = "{dir}/{file}".format(
                    dir = Geno.dir[ 'genomon' ],
                    file = script_file )
        dest = "{dir}/{file}".format(
                    dir = Geno.dir[ 'script' ],
                    file = os.path.basename( script_file )
                )
        shutil.copy( src, dest )

    
########################################
def set_env_variables():
    """
    Set environment variables for some tools

    """
    global Geno

    for tool_env in res.env_list.keys():
        env_value = Geno.conf.get( 'ENV', tool_env )
        if None != env_value:
            for env_name in res.env_list[ tool_env ]:
                if env_name in os.environ:
                    tmp = os.environ[ env_name ]
                    os.environ[ env_name ] = tmp + ':' + env_value
                else:
                    os.environ[ env_name ] = env_value
            return_value = True
        else:
            return_value = False

    if 'PYTHONPATH' in os.environ:
        tmp = os.environ[ 'PYTHONPATH' ] +  ':'
    else:
        tmp = ''
    os.environ[ 'PYTHONPATH' ] = tmp + Geno.dir[ 'genomon' ]

    return return_value

########################################
def sample_num():
    n = 0
    file_name_format_tmp = Geno.job.get_job( 'file_name' )

    if file_name_format_tmp:
        pair_id_list = Geno.job.get_job( 'pair_id' )
        if pair_id_list:
            file_name_format = file_name_format_tmp.format( pair_id = pair_id_list[0] )
        else:
            file_name_format = file_name_format_tmp

        sample_name  = Geno.job.get_job( 'sample_name' )
        if sample_name:
            file_name = "{subdir}/{filename}".format( subdir = sample_name, filename = file_name_format )
        else:
            file_name = file_name_format
         
        n = len( glob( Geno.dir[ 'data' ] + '/' + file_name ) )

    return n


########################################
class InputFileError( Exception ):
    def __init__( self, value ):
        self.value = value
    def __str__( self ):
        return repr( self.value )


###############################################################################
#
# main
#
def main():
    global log
    global log_mutex
    global Geno

    try:
        #
        # Argument parse
        #
        argvs = sys.argv
        arg_parser = construct_arguments()

        #
        # parse arguments
        #
        if len(argvs) < 2:
            arg_parser.print_help()
            sys.exit( 0 )

        Geno.options = arg_parser.parse_args()
        Geno.dir[ 'genomon' ] = os.path.dirname( os.path.realpath(__file__) )

        #
        # Logging setup
        #
        #  logger which can be passed to multiprocessing ruffus tasks
        if Geno.options.verbose != 0:
            verbose_level = Geno.options.verbose
        else:
            verbose_level = None

        log, log_mutex = cmdline.setup_logging( __name__,
                                                Geno.options.log_file,
                                                verbose_level)
        #
        # Print header in log
        #
        printheader( argvs[ 0 ], Geno.options )

        #
        # Load sample list file
        #
        if Geno.options.sample_file:
            smpl = smpl_list( Geno.options.sample_file )
            Geno.sample_list = smpl.get_sample_list()
            Geno.sample_compare = smpl.get_compare()
            del smpl


        #
        # Parse system and job config file
        #
        if Geno.options.config_file:
            Geno.conf = ge_cfg( config_file = Geno.options.config_file, log = log )
            if not Geno.conf.check_file( Geno.dir[ 'genomon' ] + '/' + res.job_file_words ):
                raise InputFileError( 'System config file contains invalid settings.' )
        else:
            Geno.conf = ge_cfg( config_file = Geno.dir[ 'genomon' ] + '/' + res.default_config )

        if Geno.options.job_file:
            Geno.job = ge_job( job_file = Geno.options.job_file,
                               param_file = Geno.options.param_file if Geno.options.param_file else None,
                               Genomon_dir = Geno.dir[ 'genomon' ],
                               now = Geno.now,
                               log = log )
            if not Geno.job.check_file( Geno.dir[ 'genomon' ] + '/' + res.job_file_words ):
                raise InputFileError( 'Job YAML file contains invalid settings.' )
        else:
            Geno.job = ge_job( Genomon_dir = Geno.dir[ 'genomon' ],
                               project_root = Geno.options.output_directory,
                               task = Geno.options.analysis_type,
                               compare_list = Geno.sample_compare,
                               now = Geno.now,
                               log = log )

        #
        # Get task type
        #
        tasks =  Geno.job.get_job( 'tasks' )
        if tasks:
            Geno.job_tasks = tasks.keys()[ 0 ]

        #
        # Prepare directory tree for pipeline to run.
        # Copy the input configuration files to results directory
        # Link input_data to project's data directory
        #
        make_directories()
        copy_config_files()
        copy_script_files()
        make_input_file_link( sample_list = Geno.sample_list if hasattr( Geno, 'sample_list') else None )

        if not set_env_variables():
            log.error( "Necesesary value in [ENV] is not set in system configuration file." )
            raise Exception( 'set_env_variables failed' )
            

        #
        # Initialize RunTask object
        #
        native_param = None
#        if Geno.options.mpi and not Geno.options.drmaa:
#            run_mode = 'MPI'
#        elif Geno.options.drmaa and not Geno.options.mpi:
        if Geno.options.drmaa:
            run_mode = 'DRMAA'
            native_param = Geno.job.get_job( 'drmaa_native' )
        else:
            run_mode = 'qsub'

        if not Geno.options.abpath:
            drmaa_log_dir = Geno.dir[ 'project_root' ] + '/' + Geno.dir[ 'log' ]
        else:
            drmaa_log_dir = Geno.dir[ 'log' ]

        Geno.RT = RunTask( run_mode = run_mode,
                           drmaa_native = native_param,
                           log_dir = drmaa_log_dir,
                           work_dir = Geno.dir[ 'project_root' ],
                           log = log,
                           ncpus = Geno.options.jobs,
                           qsub_cmd = Geno.job.get_job( 'qsub_cmd' ) )

        #
        # Set the number of multiprocess and multithread for pipeline_run
        #
        sample_number = sample_num()
        if Geno.options.multiprocess != None:
            num_proc = Geno.options.multiprocess
        elif Geno.options.jobs:
            num_proc = Geno.options.jobs
        else:
            num_proc = sample_number

        if Geno.options.multithread != None:
            multithread = Geno.options.multithread
        elif ( Geno.options.use_threads and
               Geno.options.jobs ):
            multithread = Geno.options.jobs
        elif Geno.options.use_threads:
            multithread = sample_number
        else:
            multithread = None

        #
        # Print information
        #
#        log.info( '# main: process={num}'.format( num = Geno.options.jobs ) )

        #######################################################################
        #
        # Run the defined pipeline
        # Figure out what analysis to run from job configuration file
        #
        run_flag = False

        if 'DNA' in Geno.job_tasks:
            from helpers import wgs_pipeline as pipeline
            run_flag = True

#        elif 'RNA-expression' in Geno.job_tasks:
#            from helpers import rna_pipeline as pipeline
#            run_flag = True

        elif 'RNA' in Geno.job_tasks:
            from helpers import star_pipeline as pipeline
            run_flag = True

        if not run_flag:
            log.error( "Proper task is not set in job configuration file." )
            raise Exception( 'Pipeline failed.' )

#
#       multiprocess
#
#       Optional. The number of processes which should be dedicated to running in parallel independent tasks
#            and jobs within each task. If multiprocess is set to 1, the pipeline will execute in the main process.
#
#       multithread
#
#       Optional. The number of threads which should be dedicated to running in parallel independent tasks
#            and jobs within each task. Should be used only with drmaa.
#            Otherwise the CPython global interpreter lock (GIL) will slow down your pipeline
#
#       verbose            
#
#       Optional parameter indicating the verbosity of the messages sent to logger: (Defaults to level 1 if unspecified)
#
#           level 0 : nothing
#           level 1 : Out-of-date Task names
#           level 2 : All Tasks (including any task function docstrings)
#           level 3 : Out-of-date Jobs in Out-of-date Tasks, no explanation
#           level 4 : Out-of-date Jobs in Out-of-date Tasks, with explanations and warnings
#           level 5 : All Jobs in Out-of-date Tasks, (include only list of up-to-date tasks)
#           level 6 : All jobs in All Tasks whether out of date or not
#           level 10: logs messages useful only for debugging ruffus pipeline code
        if Geno.options.recreate_database:
            touch_files_only = CHECKSUM_REGENERATE
        elif Geno.options.touch_files_only:
            touch_files_only = True
        else:
            touch_files_only = False

        pipeline_run(   target_tasks = [ pipeline.last_function ],
               multiprocess = num_proc,
               multithread = multithread,
               exceptions_terminate_immediately = True,
               log_exceptions = True,
               checksum_level = 2,
               verbose = verbose_level,
               history_file = Geno.options.history_file,
               logger = log )
                        
#        pipeline_printout_graph( "flow_{job_type}".format( job_type = job_tasks.keys()[ 0 ] ),
#                                 "jpg",
#                                 [ pipeline.last_function ]
#                )
#        cmdline.run( Geno.options )
        #
        #######################################################################

    except InputFileError, error:
        log.error( "{name}: Input file error: {error}.".format( name = whoami(), error = error ) )

    except IOError, (errno, strerror):
        log.error( "{0}: I/O error({1}): {2}".format( whoami(), errno, strerror) )

    except ValueError:
        log.error( "{0}: ValueError".format( whoami() ) )

    except Exception, e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        log.error( "{0}: Unexpected error".format( whoami() ) )
        log.error( e )
        log.error("{0}: {1}:{2}".format( exc_type, fname, exc_tb.tb_lineno) )

    sys.exit( 0 )


################################################################################
if __name__ == "__main__":
    main()

