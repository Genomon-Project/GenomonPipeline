"""

Job file checker


"""

import sys
import os
from datetime import datetime
import argparse
import logging
import yaml
import ConfigParser
import pprint
from glob import glob

from resource.genomon_rc import end_dir_list as end_dir_list

#
# Subroutines
#

def PrintHeader( pp, myself):
    """
        Print header

    """
    now = datetime.now()

    print( '#' * 84 )
    print( '# Job YAML file checker' )
    print( '# Generated by %(my)s' % { 'my': myself } )
    print( '# %(y)d.%(m)d.%(d)d.%(h)d:%(m)d' % { 'y': now.year, 'm': now.month, 'd': now.day, 'h': now.hour, 'm': now.minute } )


def get_dir ( dir_tree, cwd, dir_name ):
    """
    return the path to the specified directory by dir_tree

    """
    if isinstance( dir_tree, dict ):
        for dir_tmp in dir_tree.keys():
            cwd_tmp = cwd + '/' + dir_tmp
            if isinstance( dir_tmp, str) and dir_tmp  == dir_name:
                return cwd_tmp
            if ( isinstance( dir_tree[ dir_tmp ], dict ) or
                 isinstance( dir_tree[ dir_tmp ], list ) ):
                dir_returned =  get_dir( dir_tree[ dir_tmp ], cwd_tmp, dir_name )

                if None != dir_returned:
                    return dir_returned
            
    elif isinstance( dir_tree, list ):
        n = 0
        for dir_tmp in dir_tree:
            if isinstance( dir_tmp, str):
                cwd_tmp = cwd + '/' + dir_tmp
            elif isinstance( dir_tmp, dict):
                cwd_tmp = cwd + '/' + dir_tmp.keys()[ 0 ]

            if ( ( isinstance( dir_tmp, str) and dir_tmp == dir_name ) or
                 ( isinstance( dir_tmp, dict) and dir_tmp.keys()[0] == dir_name ) ):
                return cwd_tmp
            else:
                if ( isinstance( dir_tree[ n ], dict ) or
                     isinstance( dir_tree[ n ], list ) ):
                    dir_returned =  get_dir( dir_tree[ n ], cwd, dir_name )
                    if None != dir_returned:
                        return dir_returned
            n = n + 1
    else:
        if isinstance( dir_tmp, str) and dir_tmp  == dir_name:
            cwd_tmp = cwd + '/' + dir_tmp
            return cwd_tmp

    return None

#
# Job file checker
#
def Job_file_check( pp, job_yaml, keywords ):
    """
        Job file checker

    """
    #
    # Mandatory difinitions
    #
    f_error = 0

    print( '#' * 84 + '' )
    print( "" )
    print( "##### Mandaotry keyword check results #####" )
    for keyword in keywords[ 'mandatory' ]:
        if not ( keyword in job_yaml ):
            pp.pprint( "Keyword '{keyword}' is not defined.".format(
                        keyword = keyword ) )
            f_error |= 0x01

    if not ( f_error & 0x01 ):    
        print( "Looks OK." )

    #
    # Optional difinitions
    #
    print( "" )
    print( "##### Optional keyword parse results #####" )
    for keyword in keywords[ 'optional' ]:
        if keyword in job_yaml:
            data = job_yaml[ keyword ]
            if data:
                print( "{keyword}: ".format( keyword = keyword ) )
                print '    ',
                pp.pprint( data )
    print( "" ) 

    #
    # Dependency
    #
    # 1) input_file_dir exists.
    # 2) project_root exists.
    # 3) input_file exists.
    # 4) pair_id check: pair_id is defined, if {pair_id} exists in qsub_cmd.
    # 5) file_ext check: check if the file_name contains file_ext.
    # 6) sample_subdir exits in input_file_dir.
    # 7) control_subdir exits in input_file_dir.
    # 8) disease_subdir exits in input_file_dir.
    #

    #
    # 1), 2)
    data_dir_list = ( 'input_file_dir', 'project_root' )
    print( "##### Data file check  #####" )
    for dir_tmp in data_dir_list:
        if not glob( os.path.expanduser( job_yaml[ dir_tmp ] ) ):
            print( "The directory specified in '{dir}:' does not exist.".format( dir = dir_tmp ) )
            f_error |= 0x02

    if not ( f_error & 0x02 ):
        print( "Data directories exist properly." )

    #
    # 3), 4), 5), 6), 7), 8)
    pair_id_list = None
    if 'pair_id' in job_yaml:
        pair_id_list = job_yaml[ 'pair_id' ]
    elif job_yaml[ 'input_file_type' ] == 'pair_fastq':
        print( "'pair_id' is not defined, though 'input_file_type' equals 'pair_fastq'."  )
        f_error |= 0x04

    if ( 'sample_subdir' in job_yaml ):
        print( "There are sample_subdir."  )
        f_error |= 0x04


    if isinstance( job_yaml[ 'file_name' ], list ):
        file_name_list = job_yaml[ 'file_name' ]
    else:
        file_name_list = [ job_yaml[ 'file_name' ] ]

    for file_name_str in file_name_list: 
        if pair_id_list != None and -1 == file_name_str.find( 'pair_id' ):
            print( "'file_name:' does not contain '{pair_id}'." )
            f_error |= 0x04

        if 'file_ext' in job_yaml and -1 == file_name_str.find( job_yaml[ 'file_ext' ] ):
            print( "'file_name:' does not contain '{file_ext}'.".format( file_ext = job_yaml[ 'file_ext' ] ) )
            f_error |= 0x04

        dir_list = []
        if 'input_file_dir' in job_yaml:
            if 'sample_subdir' in job_yaml:
                if pair_id_list != None:
                    for pair_id in pair_id_list:
                        dir_list.append( job_yaml[ 'input_file_dir' ] + '/' +
                                         job_yaml[ 'sample_subdir' ] + '/' +
                                         file_name_str.format( pair_id = pair_id ) )
                else:
                    dir_list.append( job_yaml[ 'input_file_dir' ] + '/' +
                                     job_yaml[ 'sample_subdir' ] + '/' +
                                     file_name_str )

            elif 'control_subdir' in job_yaml and 'disease_subdir' in job_yaml:
                if pair_id_list != None:
                    for pair_id in pair_id_list:
                        dir_list.append( job_yaml[ 'input_file_dir' ] + '/' +
                                         job_yaml[ 'control_subdir' ] + '/' +
                                         file_name_str.format( pair_id = pair_id ) )
                else:
                    dir_list.append( job_yaml[ 'input_file_dir' ] + '/' +
                                     job_yaml[ 'control_subdir' ] + '/' +
                                     file_name_str )
                if pair_id_list != None:
                    for pair_id in pair_id_list:
                        dir_list.append( job_yaml[ 'input_file_dir' ] + '/' +
                                         job_yaml[ 'disease_subdir' ] + '/' +
                                         file_name_str.format( pair_id = pair_id ) )
                else:
                    dir_list.append( job_yaml[ 'input_file_dir' ] + '/' +
                                     job_yaml[ 'disease_subdir' ] + '/' +
                                     file_name_str )

            elif 'control_subdir' in job_yaml:
                print( " 'disease_subdir:' does not exist." )
                f_error |= 0x04

            elif 'disease_subdir' in job_yaml:
                print( " 'control_subdir:' does not exist." )
                f_error |= 0x04

            else:
                if pair_id_list != None:
                    for pair_id in pair_id_list:
                        dir_list.append( job_yaml[ 'input_file_dir' ] + '/' +
                                         file_name_str.format( pair_id = pair_id ) )
                else:
                    dir_list.append( job_yaml[ 'input_file_dir' ] + '/' +
                                     file_name_str )

        for dir_tmp in dir_list:
            if not glob( dir_tmp ):
                print( "Specified input files do not exist." )
                f_error |= 0x02


    #
    # project_dir_tree output directory check
    #
    print( "" )
    print( "##### project_dir_tree check #####" )
    if 'project_dir_tree' in job_yaml:
        dir_tree = job_yaml[ 'project_dir_tree' ]
        task_ids = job_yaml[ 'tasks' ]
        for task in task_ids:
            for nec_dir in keywords[ 'out_dir' ].keys():
                if ( nec_dir in task_ids[ task ] and
                     not get_dir( dir_tree, '', keywords[ 'out_dir' ][ nec_dir ] ) ):
                    f_error |= 0x04
                    print( "{dir} is not found in 'project_dir_tree:'.".format( dir = nec_dir ) )

    if not( f_error & 0x04 ):
        print( "Parameter are defined properly." )

    #
    # Summary
    #
    print( "" )
    print( "##### Job files summary  #####" )

    if f_error & 0x03:
        print( "ERROR!!!!" )
    else:
        print( "All look OK." )

    if f_error & 0x01:
        print( "Some mandatory keywords are NOT DEFINED!!!" )

    if f_error & 0x02:
        print( "Specified file or directory does NOT EXIST!!!" )

    if f_error & 0x04:
        print( "Some parameter are NOT DEFINED properly. Default value is going to be used." )

#
# Analysis parameter file check
#
def Param_file_check( pp, job_yaml, param_yaml, keyword_file ):
    """
    Analsysi parameter file checker

    """

    #
    # Parameters
    #
    f_error = 0

    print( "" )
    print( '#' * 84 + '' )
    print( "" )
    print( "##### Parameter keyword check results #####" )
    for task in job_yaml[ 'tasks' ].keys():
        for task_process in job_yaml[ 'tasks' ][ task ]:
            if task_process in keyword_file[ 'parameters' ].keys():
                for key_process in keyword_file[ 'parameters' ][ task_process ]:
                    if not( key_process in param_yaml[ task_process ].keys() ):
                        pp.pprint( "Keyword '{keyword}' is not defined for {step}.".format(
                                keyword = word,
                                step = keyword[ word ] ) )
                        f_error |= 0x01

    if not( f_error & 0x01 ):
        print( "Looks OK." )

#
# System configuration file check
#
def System_config_file_check( pp, system_config, keyword_file ):

    print( "" )
    print( '#' * 84 + '' )
    print( "" )
    print( "##### System configuration file check results #####" )
    num_error = 0
    system_data = keyword_file[ 'system' ]
    for type in system_data.keys():
        for data in system_data[ type ].keys():
            if not system_config.get( type, data ):
                num_error += 1
                pp.pprint( "Keyword '{type}:{data}' is not defined in system configuration file.".format(
                            type = type, data = data ) )

    if 0 == num_error:
        print( "System configuration file looks OK." )

#
# Main
#
def main():  

    try:
        logging.basicConfig( level = logging.INFO )

        #
        # Argument parse
        #
        argvs = sys.argv
        myself = argvs[ 0 ]
        argc = len(argvs)

        parser = argparse.ArgumentParser( description = "Template" )
        parser.add_argument( '-j', '--job_file',        help = "Job config file",    type = str )
        parser.add_argument( '-p', '--param_file',      help = "Analysis parameter file", type = str )
        parser.add_argument( '-s', '--system_config',   help = "System config file", type = str )
        parser.add_argument( '-k', '--keyword_file',    help = "Keyword file",       type = str )

        if argc < 2:
            print parser.print_help();
            sys.exit( 1 )
        
        arg = parser.parse_args()

        #
        # Print header
        #
        pp = pprint.PrettyPrinter( indent = 4 )
        PrintHeader( pp, myself )

        if arg.keyword_file:
            keyword_f = open( arg.keyword_file )
            keyword_yaml = yaml.load( keyword_f )
        else:
            print parser.print_help();
            sys.exit( 1 )

        if arg.job_file:
            job_f = open( arg.job_file )
            job_yaml = yaml.load( job_f )
            Job_file_check( pp, job_yaml, keyword_yaml )

        if arg.param_file:
            param_f = open( arg.param_file )
            param_yaml = yaml.load( param_f )
            Param_file_check( pp, job_yaml, param_yaml, keyword_yaml )

        if arg.system_config:
            system_config = ConfigParser.SafeConfigParser() 
            system_config.read( arg.system_config )

            System_config_file_check( pp, system_config, keyword_yaml )

    except IOError as (errno, stderror ):
        logging.error( "genomon_job.open_job: IOError: error number: {num}, std_error: {stderr}".format(
                    num = errno, stderr = stderror ) )
    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        logging.error( "genomon_job.open_job: unexpected error:", sys.exc_info()[0] )
        logging.error("{0}: {1}:{2}".format( exc_type, fname, exc_tb.tb_lineno) )

if __name__ == "__main__":
    main()
